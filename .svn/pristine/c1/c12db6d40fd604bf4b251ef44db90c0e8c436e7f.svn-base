using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Common;
using Model;

namespace Dal
{
    public class ManagerInfoDal
    {
        public List<ManagerInfo> GetList()
        {
            //定义一个集合，用于转存数据
            List<ManagerInfo> list=new List<ManagerInfo>();
            //执行查询，得到结果
            DataTable dt= SqliteHelper.GetList("select * from managerinfo");
            //逐行遍历数据，将表中的数据存到集合中
            foreach (DataRow row in dt.Rows)
            {
                //1、list.Add()
                //2、new ManagerInfo()
                //3、{对象的初始化}
                list.Add(new ManagerInfo()
                {
                    Mid = Convert.ToInt32(row["mid"]),
                    MName = row["mname"].ToString(),
                    MPwd = row["mpwd"].ToString(),
                    MType = Convert.ToInt32(row["mtype"])
                });
            }
            //返回集合
            return list;
        }

        public int Insert(ManagerInfo mi)
        {
            //构造sql语句
            string sql = "insert into managerinfo(mname,mpwd,mtype) values(@name,@pwd,@type)";
            
            //数组的初始化器
            SQLiteParameter[] ps=
            {
                new SQLiteParameter("@name",mi.MName), 
                new SQLiteParameter("@pwd",Md5Helper.GetMd5(mi.MPwd)), 
                new SQLiteParameter("@type",mi.MType)
            };
            //执行
            return SqliteHelper.ExecuteNonQuery(sql, ps);
        }

        public int DeleteById(int id)
        {
            //构造Sql语句
            string sql = "delete from managerinfo where mid=@id";
            SQLiteParameter p=new SQLiteParameter("@id",id);
            //调用执行
            return SqliteHelper.ExecuteNonQuery(sql, p);
        }

        public int Update(ManagerInfo mi)
        {
            //构造Sql语句
            List<SQLiteParameter> list=new List<SQLiteParameter>();

            string sql = "update managerinfo set mname=@name,";
            list.Add(new SQLiteParameter("@name",mi.MName));
            //判断密码是否需要进行修改
            if (!mi.MPwd.Equals("******"))
            {
                sql += "mpwd=@pwd,";
                list.Add(new SQLiteParameter("@pwd",Md5Helper.GetMd5(mi.MPwd)));
            }
            sql+="mtype=@type where mid=@id";
            list.Add(new SQLiteParameter("@type",mi.MType));
            list.Add(new SQLiteParameter("@id",mi.Mid));
            //调用执行
            return SqliteHelper.ExecuteNonQuery(sql, list.ToArray());
        }
    }
}
